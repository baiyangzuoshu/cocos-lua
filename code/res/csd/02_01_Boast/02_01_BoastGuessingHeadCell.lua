--------------------------------------------------------------
-- This file was automatically generated by Cocos Studio.
-- Do not make changes to this file.
-- All changes will be lost.
--------------------------------------------------------------

local luaExtend = require("csd.LuaScript.LuaExtend")

-- using for layout to decrease count of local variables
local layout = nil
local localLuaFile = nil
local innerCSD = nil
local innerProject = nil
local localFrame = nil

local Result = {}	
Result["MPLISTLISTDATA"] = { 	
"ui/00_02_Default/00_02_Default_1.plist",	
}	

------------------------------------------------------------
-- function call description
-- create function caller should provide a function to 
-- get a callback function in creating scene process.
-- the returned callback function will be registered to 
-- the callback event of the control.
-- the function provider is as below :
-- Callback callBackProvider(luaFileName, node, callbackName)
-- parameter description:
-- luaFileName  : a string, lua file name
-- node         : a Node, event source
-- callbackName : a string, callback function name
-- the return value is a callback function
------------------------------------------------------------
function Result.create(callBackProvider)

local result={}
setmetatable(result, luaExtend)

--Create Layer
local Layer=cc.Node:create()
Layer:setName("Layer")
layout = ccui.LayoutComponent:bindLayoutComponent(Layer)
layout:setSize({width = 120.0000, height = 120.0000})

--Create HeadCell
local HeadCell=cc.Node:create()
HeadCell:setName("HeadCell")
HeadCell:setTag(449)
HeadCell:setCascadeColorEnabled(true)
HeadCell:setCascadeOpacityEnabled(true)
HeadCell:setPosition(60.0000, 60.0000)
layout = ccui.LayoutComponent:bindLayoutComponent(HeadCell)
layout:setPositionPercentX(0.5000)
layout:setPositionPercentY(0.5000)
layout:setLeftMargin(60.0000)
layout:setRightMargin(60.0000)
layout:setTopMargin(60.0000)
layout:setBottomMargin(60.0000)
Layer:addChild(HeadCell)

--Create Head
local Head=cc.Node:create()
Head:setName("Head")
Head:setTag(325)
Head:setCascadeColorEnabled(true)
Head:setCascadeOpacityEnabled(true)
layout = ccui.LayoutComponent:bindLayoutComponent(Head)
HeadCell:addChild(Head)

--Create HeadFrame
local HeadFrame = ccui.ImageView:create()
HeadFrame:ignoreContentAdaptWithSize(false)
HeadFrame:loadTexture("00_02_Default/102001.png", 1)
HeadFrame:setLayoutComponentEnabled(true)
HeadFrame:setName("HeadFrame")
HeadFrame:setTag(451)
HeadFrame:setCascadeColorEnabled(true)
HeadFrame:setCascadeOpacityEnabled(true)
layout = ccui.LayoutComponent:bindLayoutComponent(HeadFrame)
layout:setSize({width = 120.0000, height = 120.0000})
layout:setLeftMargin(-60.0000)
layout:setRightMargin(-60.0000)
layout:setTopMargin(-60.0000)
layout:setBottomMargin(-60.0000)
HeadCell:addChild(HeadFrame)

--Create HeadPanel
local HeadPanel = ccui.Layout:create()
HeadPanel:ignoreContentAdaptWithSize(false)
HeadPanel:setClippingEnabled(false)
HeadPanel:setBackGroundColorOpacity(102)
HeadPanel:setTouchEnabled(true);
HeadPanel:setLayoutComponentEnabled(true)
HeadPanel:setName("HeadPanel")
HeadPanel:setTag(1945)
HeadPanel:setCascadeColorEnabled(true)
HeadPanel:setCascadeOpacityEnabled(true)
HeadPanel:setAnchorPoint(0.5000, 0.5000)
layout = ccui.LayoutComponent:bindLayoutComponent(HeadPanel)
layout:setSize({width = 120.0000, height = 120.0000})
layout:setLeftMargin(-60.0000)
layout:setRightMargin(-60.0000)
layout:setTopMargin(-60.0000)
layout:setBottomMargin(-60.0000)
HeadCell:addChild(HeadPanel)

--Create Animation
result['animation'] = ccs.ActionTimeline:create()
  
result['animation']:setDuration(0)
result['animation']:setTimeSpeed(1.0000)
--Create Animation List

result['root'] = Layer
return result;
end

return Result

