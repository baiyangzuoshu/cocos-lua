--------------------------------------------------------------
-- This file was automatically generated by Cocos Studio.
-- Do not make changes to this file.
-- All changes will be lost.
--------------------------------------------------------------

local luaExtend = require("csd.LuaScript.LuaExtend")

-- using for layout to decrease count of local variables
local layout = nil
local localLuaFile = nil
local innerCSD = nil
local innerProject = nil
local localFrame = nil

local Result = {}	
Result["MPLISTLISTDATA"] = { 	
"ui/01_10_Mail/01_10_Mail_1.plist",	
"ui/Default/Default_1.plist",	
}	

------------------------------------------------------------
-- function call description
-- create function caller should provide a function to 
-- get a callback function in creating scene process.
-- the returned callback function will be registered to 
-- the callback event of the control.
-- the function provider is as below :
-- Callback callBackProvider(luaFileName, node, callbackName)
-- parameter description:
-- luaFileName  : a string, lua file name
-- node         : a Node, event source
-- callbackName : a string, callback function name
-- the return value is a callback function
------------------------------------------------------------
function Result.create(callBackProvider)

local result={}
setmetatable(result, luaExtend)

--Create Layer
local Layer=cc.Node:create()
Layer:setName("Layer")
layout = ccui.LayoutComponent:bindLayoutComponent(Layer)
layout:setSize({width = 64.0000, height = 64.0000})

--Create MailCell
local MailCell=cc.Node:create()
MailCell:setName("MailCell")
MailCell:setTag(107)
MailCell:setCascadeColorEnabled(true)
MailCell:setCascadeOpacityEnabled(true)
MailCell:setPosition(32.0000, 32.0000)
layout = ccui.LayoutComponent:bindLayoutComponent(MailCell)
layout:setPositionPercentX(0.5000)
layout:setPositionPercentY(0.5000)
layout:setLeftMargin(32.0000)
layout:setRightMargin(32.0000)
layout:setTopMargin(32.0000)
layout:setBottomMargin(32.0000)
Layer:addChild(MailCell)

--Create MailPanel
local MailPanel = ccui.Layout:create()
MailPanel:ignoreContentAdaptWithSize(false)
MailPanel:setClippingEnabled(false)
MailPanel:setBackGroundColorType(1)
MailPanel:setBackGroundColor({r = 0, g = 0, b = 0})
MailPanel:setBackGroundColorOpacity(102)
MailPanel:setLayoutComponentEnabled(true)
MailPanel:setName("MailPanel")
MailPanel:setTag(110)
MailPanel:setCascadeColorEnabled(true)
MailPanel:setCascadeOpacityEnabled(true)
MailPanel:setAnchorPoint(0.5000, 0.5000)
MailPanel:setOpacity(102)
MailPanel:setColor({r = 0, g = 0, b = 0})
layout = ccui.LayoutComponent:bindLayoutComponent(MailPanel)
layout:setSize({width = 40.0000, height = 40.0000})
layout:setLeftMargin(-20.0000)
layout:setRightMargin(-20.0000)
layout:setTopMargin(-20.0000)
layout:setBottomMargin(-20.0000)
MailCell:addChild(MailPanel)

--Create MailCellBg
local MailCellBg = cc.Sprite:createWithSpriteFrameName("01_10_Mail/frame_047.png")
MailCellBg:setName("MailCellBg")
MailCellBg:setTag(710)
MailCellBg:setCascadeColorEnabled(true)
MailCellBg:setCascadeOpacityEnabled(true)
layout = ccui.LayoutComponent:bindLayoutComponent(MailCellBg)
layout:setSize({width = 64.0000, height = 64.0000})
layout:setLeftMargin(-32.0000)
layout:setRightMargin(-32.0000)
layout:setTopMargin(-32.0000)
layout:setBottomMargin(-32.0000)
MailCellBg:setBlendFunc({src = 1, dst = 771})
MailCell:addChild(MailCellBg)

--Create MailResIcon
local MailResIcon = ccui.ImageView:create()
MailResIcon:ignoreContentAdaptWithSize(false)
MailResIcon:loadTexture("Default/ImageFile.png", 1)
MailResIcon:setLayoutComponentEnabled(true)
MailResIcon:setName("MailResIcon")
MailResIcon:setTag(109)
MailResIcon:setCascadeColorEnabled(true)
MailResIcon:setCascadeOpacityEnabled(true)
MailResIcon:setScaleX(0.6400)
MailResIcon:setScaleY(0.6400)
layout = ccui.LayoutComponent:bindLayoutComponent(MailResIcon)
layout:setSize({width = 40.0000, height = 40.0000})
layout:setLeftMargin(-20.0000)
layout:setRightMargin(-20.0000)
layout:setTopMargin(-20.0000)
layout:setBottomMargin(-20.0000)
MailCell:addChild(MailResIcon)

--Create Animation
result['animation'] = ccs.ActionTimeline:create()
  
result['animation']:setDuration(0)
result['animation']:setTimeSpeed(1.0000)
--Create Animation List

result['root'] = Layer
return result;
end

return Result

